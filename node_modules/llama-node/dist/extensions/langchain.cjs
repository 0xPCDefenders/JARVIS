"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/extensions/langchain.ts
var langchain_exports = {};
__export(langchain_exports, {
  LLamaEmbeddings: () => LLamaEmbeddings
});
module.exports = __toCommonJS(langchain_exports);
var import_base = require("langchain/embeddings/base");
var LLamaEmbeddings = class extends import_base.Embeddings {
  constructor(params, llm) {
    var _a;
    super(params);
    if (((_a = params.maxConcurrency) != null ? _a : 1) > 1) {
      console.warn(
        "maxConcurrency > 1 not officially supported for llama-node, use at your own risk"
      );
    }
    this.llm = llm;
  }
  embedDocuments(documents) {
    const promises = documents.map(
      (doc) => this.llm.getDefaultEmbeddings(doc)
    );
    return Promise.all(promises);
  }
  embedQuery(document) {
    return this.llm.getDefaultEmbeddings(document);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  LLamaEmbeddings
});
//# sourceMappingURL=langchain.cjs.map