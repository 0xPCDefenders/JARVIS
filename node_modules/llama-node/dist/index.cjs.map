{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { CompletionCallback } from \"./llm\";\nimport type { ILLM } from \"./llm\";\n\nclass LLM<\n    Instance = any,\n    LoadConfig = any,\n    LLMInferenceArguments = any,\n    LLMEmbeddingArguments = any,\n    TokenizeArguments = any\n> {\n    llm: ILLM<\n        Instance,\n        LoadConfig,\n        LLMInferenceArguments,\n        LLMEmbeddingArguments,\n        TokenizeArguments\n    >;\n\n    constructor(\n        llm: new () => ILLM<\n            Instance,\n            LoadConfig,\n            LLMInferenceArguments,\n            LLMEmbeddingArguments,\n            TokenizeArguments\n        >\n    ) {\n        this.llm = new llm();\n    }\n\n    load(config: LoadConfig) {\n        return this.llm.load(config);\n    }\n\n    async createCompletion(\n        params: LLMInferenceArguments,\n        callback: CompletionCallback\n    ): Promise<boolean> {\n        return this.llm.createCompletion(params, callback);\n    }\n\n    async getEmbedding(params: LLMEmbeddingArguments): Promise<number[]> {\n        if (!this.llm.getEmbedding) {\n            console.warn(\"getEmbedding not implemented for current LLM\");\n            return [];\n        } else {\n            return this.llm.getEmbedding(params);\n        }\n    }\n\n    async getDefaultEmbeddings(text: string): Promise<number[]> {\n        if (!this.llm.getDefaultEmbedding) {\n            console.warn(\"getDefaultEmbedding not implemented for current LLM\");\n            return [];\n        } else {\n            return this.llm.getDefaultEmbedding(text);\n        }\n    }\n\n    async tokenize(content: TokenizeArguments): Promise<number[]> {\n        if (!this.llm.tokenize) {\n            console.warn(\"tokenize not implemented for current LLM\");\n            return [];\n        } else {\n            return this.llm.tokenize(content);\n        }\n    }\n}\n\n// deprecated LLama naming in the future\nexport { LLM as LLama };\n\nexport { LLM };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,IAAM,MAAN,MAME;AAAA,EASE,YACI,KAOF;AACE,SAAK,MAAM,IAAI,IAAI;AAAA,EACvB;AAAA,EAEA,KAAK,QAAoB;AACrB,WAAO,KAAK,IAAI,KAAK,MAAM;AAAA,EAC/B;AAAA,EAEM,iBACF,QACA,UACgB;AAAA;AAChB,aAAO,KAAK,IAAI,iBAAiB,QAAQ,QAAQ;AAAA,IACrD;AAAA;AAAA,EAEM,aAAa,QAAkD;AAAA;AACjE,UAAI,CAAC,KAAK,IAAI,cAAc;AACxB,gBAAQ,KAAK,8CAA8C;AAC3D,eAAO,CAAC;AAAA,MACZ,OAAO;AACH,eAAO,KAAK,IAAI,aAAa,MAAM;AAAA,MACvC;AAAA,IACJ;AAAA;AAAA,EAEM,qBAAqB,MAAiC;AAAA;AACxD,UAAI,CAAC,KAAK,IAAI,qBAAqB;AAC/B,gBAAQ,KAAK,qDAAqD;AAClE,eAAO,CAAC;AAAA,MACZ,OAAO;AACH,eAAO,KAAK,IAAI,oBAAoB,IAAI;AAAA,MAC5C;AAAA,IACJ;AAAA;AAAA,EAEM,SAAS,SAA+C;AAAA;AAC1D,UAAI,CAAC,KAAK,IAAI,UAAU;AACpB,gBAAQ,KAAK,0CAA0C;AACvD,eAAO,CAAC;AAAA,MACZ,OAAO;AACH,eAAO,KAAK,IAAI,SAAS,OAAO;AAAA,MACpC;AAAA,IACJ;AAAA;AACJ;","names":[]}