{"version":3,"sources":["../../src/llm/llama-cpp.ts"],"sourcesContent":["import {\n    EmbeddingResultType,\n    InferenceResultType,\n    LLama,\n    LlamaContextParams,\n    LlamaInvocation,\n    TokenizeResultType,\n} from \"@llama-node/llama-cpp\";\n\nimport type { ILLM } from \"../llm\";\n\nexport interface LoadConfig extends LlamaContextParams {\n    path: string;\n    enableLogging: boolean;\n}\n\nexport interface TokenizeArguments {\n    content: string;\n    nCtx: number;\n}\n\nexport class LLamaCpp\n    implements\n        ILLM<\n            LLama,\n            LoadConfig,\n            LlamaInvocation,\n            LlamaInvocation,\n            TokenizeArguments\n        >\n{\n    instance!: LLama;\n\n    load(config: LoadConfig) {\n        const { path, enableLogging, ...rest } = config;\n        this.instance = LLama.load(path, rest, enableLogging);\n    }\n\n    async createCompletion(\n        params: LlamaInvocation,\n        callback: (data: { token: string; completed: boolean }) => void\n    ): Promise<boolean> {\n        let completed = false;\n        const errors: string[] = [];\n        return new Promise<boolean>((res, rej) => {\n            this.instance.inference(params, (response) => {\n                switch (response.type) {\n                    case InferenceResultType.Data: {\n                        const data = {\n                            token: response.data!.token,\n                            completed: !!response.data!.completed,\n                        };\n                        if (data.completed) {\n                            completed = true;\n                        }\n                        callback(data);\n                        break;\n                    }\n                    case InferenceResultType.End: {\n                        if (errors.length) {\n                            rej(new Error(errors.join(\"\\n\")));\n                        } else {\n                            res(completed);\n                        }\n                        break;\n                    }\n                    case InferenceResultType.Error: {\n                        errors.push(response.message ?? \"Unknown Error\");\n                        break;\n                    }\n                }\n            });\n        });\n    }\n\n    async getEmbedding(params: LlamaInvocation): Promise<number[]> {\n        return new Promise<number[]>((res, rej) => {\n            this.instance.getWordEmbedding(params, (response) => {\n                switch (response.type) {\n                    case EmbeddingResultType.Data:\n                        res(response.data ?? []);\n                        break;\n                    case EmbeddingResultType.Error:\n                        rej(new Error(\"Unknown Error\"));\n                        break;\n                }\n            });\n        });\n    }\n\n    async getDefaultEmbedding(text: string): Promise<number[]> {\n        return this.getEmbedding({\n            nThreads: 4,\n            nTokPredict: 1024,\n            topK: 40,\n            topP: 0.1,\n            temp: 0.1,\n            repeatPenalty: 1,\n            prompt: text,\n        });\n    }\n\n    async tokenize(params: TokenizeArguments): Promise<number[]> {\n        return new Promise<number[]>((res, rej) => {\n            this.instance.tokenize(params.content, params.nCtx, (response) => {\n                if (response.type === TokenizeResultType.Data) {\n                    res(response.data);\n                } else {\n                    rej(new Error(\"Unknown Error\"));\n                }\n            });\n        });\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAOO;AAcA,IAAM,WAAN,MASP;AAAA,EAGI,KAAK,QAAoB;AACrB,UAAyC,aAAjC,QAAM,cAlCtB,IAkCiD,IAAT,iBAAS,IAAT,CAAxB,QAAM;AACd,SAAK,WAAW,uBAAM,KAAK,MAAM,MAAM,aAAa;AAAA,EACxD;AAAA,EAEM,iBACF,QACA,UACgB;AAAA;AAChB,UAAI,YAAY;AAChB,YAAM,SAAmB,CAAC;AAC1B,aAAO,IAAI,QAAiB,CAAC,KAAK,QAAQ;AACtC,aAAK,SAAS,UAAU,QAAQ,CAAC,aAAa;AA7C1D;AA8CgB,kBAAQ,SAAS,MAAM;AAAA,YACnB,KAAK,qCAAoB,MAAM;AAC3B,oBAAM,OAAO;AAAA,gBACT,OAAO,SAAS,KAAM;AAAA,gBACtB,WAAW,CAAC,CAAC,SAAS,KAAM;AAAA,cAChC;AACA,kBAAI,KAAK,WAAW;AAChB,4BAAY;AAAA,cAChB;AACA,uBAAS,IAAI;AACb;AAAA,YACJ;AAAA,YACA,KAAK,qCAAoB,KAAK;AAC1B,kBAAI,OAAO,QAAQ;AACf,oBAAI,IAAI,MAAM,OAAO,KAAK,IAAI,CAAC,CAAC;AAAA,cACpC,OAAO;AACH,oBAAI,SAAS;AAAA,cACjB;AACA;AAAA,YACJ;AAAA,YACA,KAAK,qCAAoB,OAAO;AAC5B,qBAAO,MAAK,cAAS,YAAT,YAAoB,eAAe;AAC/C;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA;AAAA,EAEM,aAAa,QAA4C;AAAA;AAC3D,aAAO,IAAI,QAAkB,CAAC,KAAK,QAAQ;AACvC,aAAK,SAAS,iBAAiB,QAAQ,CAAC,aAAa;AA7EjE;AA8EgB,kBAAQ,SAAS,MAAM;AAAA,YACnB,KAAK,qCAAoB;AACrB,mBAAI,cAAS,SAAT,YAAiB,CAAC,CAAC;AACvB;AAAA,YACJ,KAAK,qCAAoB;AACrB,kBAAI,IAAI,MAAM,eAAe,CAAC;AAC9B;AAAA,UACR;AAAA,QACJ,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA;AAAA,EAEM,oBAAoB,MAAiC;AAAA;AACvD,aAAO,KAAK,aAAa;AAAA,QACrB,UAAU;AAAA,QACV,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,eAAe;AAAA,QACf,QAAQ;AAAA,MACZ,CAAC;AAAA,IACL;AAAA;AAAA,EAEM,SAAS,QAA8C;AAAA;AACzD,aAAO,IAAI,QAAkB,CAAC,KAAK,QAAQ;AACvC,aAAK,SAAS,SAAS,OAAO,SAAS,OAAO,MAAM,CAAC,aAAa;AAC9D,cAAI,SAAS,SAAS,oCAAmB,MAAM;AAC3C,gBAAI,SAAS,IAAI;AAAA,UACrB,OAAO;AACH,gBAAI,IAAI,MAAM,eAAe,CAAC;AAAA,UAClC;AAAA,QACJ,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA;AACJ;","names":[]}