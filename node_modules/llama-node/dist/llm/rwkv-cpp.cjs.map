{"version":3,"sources":["../../src/llm/rwkv-cpp.ts"],"sourcesContent":["import {\n    // EmbeddingResultType,\n    InferenceResultType,\n    Rwkv,\n    RwkvInvocation,\n    TokenizeResultType,\n} from \"@llama-node/rwkv-cpp\";\n\nimport type { ILLM } from \"../llm\";\n\nexport interface LoadConfig {\n    modelPath: string;\n    tokenizerPath: string;\n    nThreads: number;\n    enableLogging: boolean;\n}\n\nexport interface TokenizeArguments {\n    content: string;\n}\n\nexport class RwkvCpp\n    implements\n        ILLM<Rwkv, LoadConfig, RwkvInvocation, unknown, TokenizeArguments>\n{\n    instance!: Rwkv;\n\n    load(config: LoadConfig) {\n        const { modelPath, tokenizerPath, nThreads, enableLogging } = config;\n        this.instance = Rwkv.load(\n            modelPath,\n            tokenizerPath,\n            nThreads,\n            enableLogging\n        );\n    }\n\n    async createCompletion(\n        params: RwkvInvocation,\n        callback: (data: { token: string; completed: boolean }) => void\n    ): Promise<boolean> {\n        let completed = false;\n        const errors: string[] = [];\n        return new Promise<boolean>((res, rej) => {\n            this.instance.inference(params, (response) => {\n                switch (response.type) {\n                    case InferenceResultType.Data: {\n                        const data = {\n                            token: response.data!.token,\n                            completed: !!response.data!.completed,\n                        };\n                        if (data.completed) {\n                            completed = true;\n                        }\n                        callback(data);\n                        break;\n                    }\n                    case InferenceResultType.End: {\n                        if (errors.length) {\n                            rej(new Error(errors.join(\"\\n\")));\n                        } else {\n                            res(completed);\n                        }\n                        break;\n                    }\n                    case InferenceResultType.Error: {\n                        errors.push(response.message ?? \"Unknown Error\");\n                        break;\n                    }\n                }\n            });\n        });\n    }\n\n    // embedding not implemented yet\n\n    /* async getEmbedding(params: RwkvInvocation): Promise<number[]> {\n        return new Promise<number[]>((res, rej) => {\n            this.instance.getWordEmbedding(params, (response) => {\n                switch (response.type) {\n                    case EmbeddingResultType.Data:\n                        res(response.data ?? []);\n                        break;\n                    case EmbeddingResultType.Error:\n                        rej(new Error(\"Unknown Error\"));\n                        break;\n                }\n            });\n        });\n    }\n\n    async getDefaultEmbedding(text: string): Promise<number[]> {\n        return this.getEmbedding({\n            topP: 0.1,\n            temp: 0.1,\n            prompt: text,\n            maxPredictLength: 2048,\n        });\n    } */\n\n    async tokenize(params: TokenizeArguments): Promise<number[]> {\n        return new Promise<number[]>((res, rej) => {\n            this.instance.tokenize(params.content, (response) => {\n                if (response.type === TokenizeResultType.Data) {\n                    res(response.data);\n                } else {\n                    rej(new Error(\"Unknown Error\"));\n                }\n            });\n        });\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAMO;AAeA,IAAM,UAAN,MAGP;AAAA,EAGI,KAAK,QAAoB;AACrB,UAAM,EAAE,WAAW,eAAe,UAAU,cAAc,IAAI;AAC9D,SAAK,WAAW,qBAAK;AAAA,MACjB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEM,iBACF,QACA,UACgB;AAAA;AAChB,UAAI,YAAY;AAChB,YAAM,SAAmB,CAAC;AAC1B,aAAO,IAAI,QAAiB,CAAC,KAAK,QAAQ;AACtC,aAAK,SAAS,UAAU,QAAQ,CAAC,aAAa;AA5C1D;AA6CgB,kBAAQ,SAAS,MAAM;AAAA,YACnB,KAAK,oCAAoB,MAAM;AAC3B,oBAAM,OAAO;AAAA,gBACT,OAAO,SAAS,KAAM;AAAA,gBACtB,WAAW,CAAC,CAAC,SAAS,KAAM;AAAA,cAChC;AACA,kBAAI,KAAK,WAAW;AAChB,4BAAY;AAAA,cAChB;AACA,uBAAS,IAAI;AACb;AAAA,YACJ;AAAA,YACA,KAAK,oCAAoB,KAAK;AAC1B,kBAAI,OAAO,QAAQ;AACf,oBAAI,IAAI,MAAM,OAAO,KAAK,IAAI,CAAC,CAAC;AAAA,cACpC,OAAO;AACH,oBAAI,SAAS;AAAA,cACjB;AACA;AAAA,YACJ;AAAA,YACA,KAAK,oCAAoB,OAAO;AAC5B,qBAAO,MAAK,cAAS,YAAT,YAAoB,eAAe;AAC/C;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4BM,SAAS,QAA8C;AAAA;AACzD,aAAO,IAAI,QAAkB,CAAC,KAAK,QAAQ;AACvC,aAAK,SAAS,SAAS,OAAO,SAAS,CAAC,aAAa;AACjD,cAAI,SAAS,SAAS,mCAAmB,MAAM;AAC3C,gBAAI,SAAS,IAAI;AAAA,UACrB,OAAO;AACH,gBAAI,IAAI,MAAM,eAAe,CAAC;AAAA,UAClC;AAAA,QACJ,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA;AACJ;","names":[]}