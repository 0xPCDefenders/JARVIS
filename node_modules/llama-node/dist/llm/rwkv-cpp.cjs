"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/llm/rwkv-cpp.ts
var rwkv_cpp_exports = {};
__export(rwkv_cpp_exports, {
  RwkvCpp: () => RwkvCpp
});
module.exports = __toCommonJS(rwkv_cpp_exports);
var import_rwkv_cpp = require("@llama-node/rwkv-cpp");
var RwkvCpp = class {
  load(config) {
    const { modelPath, tokenizerPath, nThreads, enableLogging } = config;
    this.instance = import_rwkv_cpp.Rwkv.load(
      modelPath,
      tokenizerPath,
      nThreads,
      enableLogging
    );
  }
  createCompletion(params, callback) {
    return __async(this, null, function* () {
      let completed = false;
      const errors = [];
      return new Promise((res, rej) => {
        this.instance.inference(params, (response) => {
          var _a;
          switch (response.type) {
            case import_rwkv_cpp.InferenceResultType.Data: {
              const data = {
                token: response.data.token,
                completed: !!response.data.completed
              };
              if (data.completed) {
                completed = true;
              }
              callback(data);
              break;
            }
            case import_rwkv_cpp.InferenceResultType.End: {
              if (errors.length) {
                rej(new Error(errors.join("\n")));
              } else {
                res(completed);
              }
              break;
            }
            case import_rwkv_cpp.InferenceResultType.Error: {
              errors.push((_a = response.message) != null ? _a : "Unknown Error");
              break;
            }
          }
        });
      });
    });
  }
  // embedding not implemented yet
  /* async getEmbedding(params: RwkvInvocation): Promise<number[]> {
          return new Promise<number[]>((res, rej) => {
              this.instance.getWordEmbedding(params, (response) => {
                  switch (response.type) {
                      case EmbeddingResultType.Data:
                          res(response.data ?? []);
                          break;
                      case EmbeddingResultType.Error:
                          rej(new Error("Unknown Error"));
                          break;
                  }
              });
          });
      }
  
      async getDefaultEmbedding(text: string): Promise<number[]> {
          return this.getEmbedding({
              topP: 0.1,
              temp: 0.1,
              prompt: text,
              maxPredictLength: 2048,
          });
      } */
  tokenize(params) {
    return __async(this, null, function* () {
      return new Promise((res, rej) => {
        this.instance.tokenize(params.content, (response) => {
          if (response.type === import_rwkv_cpp.TokenizeResultType.Data) {
            res(response.data);
          } else {
            rej(new Error("Unknown Error"));
          }
        });
      });
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RwkvCpp
});
//# sourceMappingURL=rwkv-cpp.cjs.map