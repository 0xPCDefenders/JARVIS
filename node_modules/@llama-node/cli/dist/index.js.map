{"version":3,"sources":["../src/index.ts"],"sourcesContent":["#!/usr/bin/env node\nimport {\n    convert,\n    LLamaInferenceArguments,\n    LLama,\n    LLamaConfig,\n    InferenceResultType,\n} from \"@llama-node/core\";\nimport yargs from \"yargs\";\nimport path from \"path\";\nimport { existsSync } from \"fs\";\n\nconst convertType = [\"q4_0\", \"q4_1\", \"f16\", \"f32\"] as const;\n\ntype ConvertType = typeof convertType[number];\n\ninterface CLIInferenceArguments extends LLamaInferenceArguments, LLamaConfig {\n    logger?: boolean;\n}\n\nclass InferenceCommand implements yargs.CommandModule {\n    command = \"inference\";\n    describe = \"Inference LLaMA\";\n    builder(args: yargs.Argv) {\n        return (args as yargs.Argv<CLIInferenceArguments>)\n            .help(\"help\")\n            .example('llama inference -p \"How are you?\"', \"Inference LLaMA\")\n            .options(\"feedPrompt\", {\n                type: \"boolean\",\n                demandOption: false,\n                description: \"Set it to true to hide promt feeding progress\",\n            })\n            .options(\"float16\", { type: \"boolean\", demandOption: false })\n            .options(\"ignoreEos\", { type: \"boolean\", demandOption: false })\n            .options(\"nBatch\", { type: \"number\", demandOption: false })\n            .options(\"nThreads\", { type: \"number\", demandOption: false })\n            .options(\"numPredict\", { type: \"number\", demandOption: false })\n            .options(\"prompt\", {\n                type: \"string\",\n                demandOption: true,\n                alias: \"p\",\n            })\n            .options(\"repeatLastN\", { type: \"number\", demandOption: false })\n            .options(\"repeatPenalty\", { type: \"number\", demandOption: false })\n            .options(\"seed\", { type: \"number\", demandOption: false })\n            .options(\"temp\", { type: \"number\", demandOption: false })\n            .options(\"tokenBias\", { type: \"string\", demandOption: false })\n            .options(\"topK\", { type: \"number\", demandOption: false })\n            .options(\"topP\", { type: \"number\", demandOption: false })\n            .options(\"path\", {\n                type: \"string\",\n                demandOption: true,\n                alias: [\"m\", \"model\"],\n            })\n            .options(\"numCtxTokens\", { type: \"number\", demandOption: false })\n            .options(\"logger\", {\n                type: \"boolean\",\n                demandOption: false,\n                default: true,\n                alias: \"verbose\",\n            });\n    }\n    async handler(args: yargs.ArgumentsCamelCase) {\n        const {\n            $0,\n            _,\n            path: model,\n            numCtxTokens,\n            logger,\n            ...rest\n        } = args as yargs.ArgumentsCamelCase<CLIInferenceArguments>;\n        const absolutePath = path.isAbsolute(model)\n            ? model\n            : path.join(process.cwd(), model);\n        if (logger) {\n            LLama.enableLogger();\n        }\n        const llama = LLama.create({ path: absolutePath, numCtxTokens });\n        llama.inference(rest, (result) => {\n            switch (result.type) {\n                case InferenceResultType.Data:\n                    process.stdout.write(result.data?.token ?? \"\");\n                    break;\n                case InferenceResultType.Error:\n                    console.error(result.message);\n                    break;\n                case InferenceResultType.End:\n                    break;\n            }\n        });\n    }\n}\n\nclass ConvertCommand implements yargs.CommandModule<any, any> {\n    command = \"convert\";\n    describe = \"Convert llama pth to ggml, not ready yet\";\n    builder(args: yargs.Argv) {\n        return args\n            .help(\"help\")\n            .example(\n                \"llama convert --dir ./model --type q4_0\",\n                \"Convert pth to q4_0 ggml model\"\n            )\n            .options({\n                dir: {\n                    describe: \"The directory of model and tokenizer directory\",\n                    type: \"string\",\n                    demandOption: true,\n                },\n            })\n            .options({\n                type: {\n                    describe: \"The type of model\",\n                    type: \"string\",\n                    choices: convertType,\n                    demandOption: true,\n                },\n            });\n    }\n    async handler(args: yargs.ArgumentsCamelCase) {\n        const dir = args.dir as string;\n        const type = args.type as ConvertType;\n\n        const absolute = path.isAbsolute(dir)\n            ? dir\n            : path.join(process.cwd(), dir);\n        if (!existsSync(absolute)) {\n            console.error(`Directory ${absolute} does not exist`);\n            return;\n        } else {\n            const elementType = convertType.findIndex((t) => t === type);\n            await convert(absolute, elementType);\n            console.log(\"Convert successfully\");\n        }\n    }\n}\n\n(yargs as yargs.Argv<any | CLIInferenceArguments>)\n    .scriptName(\"llama\")\n    .usage(\"$0 <cmd> [args]\")\n    .command(new ConvertCommand())\n    .command(new InferenceCommand())\n    .demandCommand(1, \"You need at least one command before moving on\")\n    .strict()\n    .parse();\n"],"mappings":"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","names":["path","_a","yargs"]}