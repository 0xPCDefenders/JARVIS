{"version":3,"sources":["../../../node_modules/.pnpm/tsup@6.7.0_typescript@5.0.4/node_modules/tsup/assets/esm_shims.js","../src/index.ts"],"sourcesContent":["// Shim globals in esm bundle\nimport { fileURLToPath } from 'url'\nimport path from 'path'\n\nconst getFilename = () => fileURLToPath(import.meta.url)\nconst getDirname = () => path.dirname(getFilename())\n\nexport const __dirname = /* @__PURE__ */ getDirname()\nexport const __filename = /* @__PURE__ */ getFilename()\n","#!/usr/bin/env node\nimport {\n    convert,\n    LLamaInferenceArguments,\n    LLama,\n    LLamaConfig,\n    InferenceResultType,\n} from \"@llama-node/core\";\nimport yargs from \"yargs\";\nimport path from \"path\";\nimport { existsSync } from \"fs\";\n\nconst convertType = [\"q4_0\", \"q4_1\", \"f16\", \"f32\"] as const;\n\ntype ConvertType = typeof convertType[number];\n\ninterface CLIInferenceArguments extends LLamaInferenceArguments, LLamaConfig {\n    logger?: boolean;\n}\n\nclass InferenceCommand implements yargs.CommandModule {\n    command = \"inference\";\n    describe = \"Inference LLaMA\";\n    builder(args: yargs.Argv) {\n        return (args as yargs.Argv<CLIInferenceArguments>)\n            .help(\"help\")\n            .example('llama inference -p \"How are you?\"', \"Inference LLaMA\")\n            .options(\"feedPrompt\", {\n                type: \"boolean\",\n                demandOption: false,\n                description: \"Set it to true to hide promt feeding progress\",\n            })\n            .options(\"float16\", { type: \"boolean\", demandOption: false })\n            .options(\"ignoreEos\", { type: \"boolean\", demandOption: false })\n            .options(\"nBatch\", { type: \"number\", demandOption: false })\n            .options(\"nThreads\", { type: \"number\", demandOption: false })\n            .options(\"numPredict\", { type: \"number\", demandOption: false })\n            .options(\"prompt\", {\n                type: \"string\",\n                demandOption: true,\n                alias: \"p\",\n            })\n            .options(\"repeatLastN\", { type: \"number\", demandOption: false })\n            .options(\"repeatPenalty\", { type: \"number\", demandOption: false })\n            .options(\"seed\", { type: \"number\", demandOption: false })\n            .options(\"temp\", { type: \"number\", demandOption: false })\n            .options(\"tokenBias\", { type: \"string\", demandOption: false })\n            .options(\"topK\", { type: \"number\", demandOption: false })\n            .options(\"topP\", { type: \"number\", demandOption: false })\n            .options(\"path\", {\n                type: \"string\",\n                demandOption: true,\n                alias: [\"m\", \"model\"],\n            })\n            .options(\"numCtxTokens\", { type: \"number\", demandOption: false })\n            .options(\"logger\", {\n                type: \"boolean\",\n                demandOption: false,\n                default: true,\n                alias: \"verbose\",\n            });\n    }\n    async handler(args: yargs.ArgumentsCamelCase) {\n        const {\n            $0,\n            _,\n            path: model,\n            numCtxTokens,\n            logger,\n            ...rest\n        } = args as yargs.ArgumentsCamelCase<CLIInferenceArguments>;\n        const absolutePath = path.isAbsolute(model)\n            ? model\n            : path.join(process.cwd(), model);\n        if (logger) {\n            LLama.enableLogger();\n        }\n        const llama = LLama.create({ path: absolutePath, numCtxTokens });\n        llama.inference(rest, (result) => {\n            switch (result.type) {\n                case InferenceResultType.Data:\n                    process.stdout.write(result.data?.token ?? \"\");\n                    break;\n                case InferenceResultType.Error:\n                    console.error(result.message);\n                    break;\n                case InferenceResultType.End:\n                    break;\n            }\n        });\n    }\n}\n\nclass ConvertCommand implements yargs.CommandModule<any, any> {\n    command = \"convert\";\n    describe = \"Convert llama pth to ggml, not ready yet\";\n    builder(args: yargs.Argv) {\n        return args\n            .help(\"help\")\n            .example(\n                \"llama convert --dir ./model --type q4_0\",\n                \"Convert pth to q4_0 ggml model\"\n            )\n            .options({\n                dir: {\n                    describe: \"The directory of model and tokenizer directory\",\n                    type: \"string\",\n                    demandOption: true,\n                },\n            })\n            .options({\n                type: {\n                    describe: \"The type of model\",\n                    type: \"string\",\n                    choices: convertType,\n                    demandOption: true,\n                },\n            });\n    }\n    async handler(args: yargs.ArgumentsCamelCase) {\n        const dir = args.dir as string;\n        const type = args.type as ConvertType;\n\n        const absolute = path.isAbsolute(dir)\n            ? dir\n            : path.join(process.cwd(), dir);\n        if (!existsSync(absolute)) {\n            console.error(`Directory ${absolute} does not exist`);\n            return;\n        } else {\n            const elementType = convertType.findIndex((t) => t === type);\n            await convert(absolute, elementType);\n            console.log(\"Convert successfully\");\n        }\n    }\n}\n\n(yargs as yargs.Argv<any | CLIInferenceArguments>)\n    .scriptName(\"llama\")\n    .usage(\"$0 <cmd> [args]\")\n    .command(new ConvertCommand())\n    .command(new InferenceCommand())\n    .demandCommand(1, \"You need at least one command before moving on\")\n    .strict()\n    .parse();\n"],"mappings":"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","names":["_a"]}