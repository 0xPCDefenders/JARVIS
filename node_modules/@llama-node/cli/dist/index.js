#!/usr/bin/env node
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
var import_core = require("@llama-node/core");
var import_yargs = __toESM(require("yargs"));
var import_path = __toESM(require("path"));
var import_fs = require("fs");
var convertType = ["q4_0", "q4_1", "f16", "f32"];
var InferenceCommand = class {
  constructor() {
    this.command = "inference";
    this.describe = "Inference LLaMA";
  }
  builder(args) {
    return args.help("help").example('llama inference -p "How are you?"', "Inference LLaMA").options("feedPrompt", {
      type: "boolean",
      demandOption: false,
      description: "Set it to true to hide promt feeding progress"
    }).options("float16", { type: "boolean", demandOption: false }).options("ignoreEos", { type: "boolean", demandOption: false }).options("nBatch", { type: "number", demandOption: false }).options("nThreads", { type: "number", demandOption: false }).options("numPredict", { type: "number", demandOption: false }).options("prompt", {
      type: "string",
      demandOption: true,
      alias: "p"
    }).options("repeatLastN", { type: "number", demandOption: false }).options("repeatPenalty", { type: "number", demandOption: false }).options("seed", { type: "number", demandOption: false }).options("temp", { type: "number", demandOption: false }).options("tokenBias", { type: "string", demandOption: false }).options("topK", { type: "number", demandOption: false }).options("topP", { type: "number", demandOption: false }).options("path", {
      type: "string",
      demandOption: true,
      alias: ["m", "model"]
    }).options("numCtxTokens", { type: "number", demandOption: false }).options("logger", {
      type: "boolean",
      demandOption: false,
      default: true,
      alias: "verbose"
    });
  }
  handler(args) {
    return __async(this, null, function* () {
      const _a = args, {
        $0,
        _,
        path: model,
        numCtxTokens,
        logger
      } = _a, rest = __objRest(_a, [
        "$0",
        "_",
        "path",
        "numCtxTokens",
        "logger"
      ]);
      const absolutePath = import_path.default.isAbsolute(model) ? model : import_path.default.join(process.cwd(), model);
      if (logger) {
        import_core.LLama.enableLogger();
      }
      const llama = import_core.LLama.create({ path: absolutePath, numCtxTokens });
      llama.inference(rest, (result) => {
        var _a2, _b;
        switch (result.type) {
          case import_core.InferenceResultType.Data:
            process.stdout.write((_b = (_a2 = result.data) == null ? void 0 : _a2.token) != null ? _b : "");
            break;
          case import_core.InferenceResultType.Error:
            console.error(result.message);
            break;
          case import_core.InferenceResultType.End:
            break;
        }
      });
    });
  }
};
var ConvertCommand = class {
  constructor() {
    this.command = "convert";
    this.describe = "Convert llama pth to ggml, not ready yet";
  }
  builder(args) {
    return args.help("help").example(
      "llama convert --dir ./model --type q4_0",
      "Convert pth to q4_0 ggml model"
    ).options({
      dir: {
        describe: "The directory of model and tokenizer directory",
        type: "string",
        demandOption: true
      }
    }).options({
      type: {
        describe: "The type of model",
        type: "string",
        choices: convertType,
        demandOption: true
      }
    });
  }
  handler(args) {
    return __async(this, null, function* () {
      const dir = args.dir;
      const type = args.type;
      const absolute = import_path.default.isAbsolute(dir) ? dir : import_path.default.join(process.cwd(), dir);
      if (!(0, import_fs.existsSync)(absolute)) {
        console.error(`Directory ${absolute} does not exist`);
        return;
      } else {
        const elementType = convertType.findIndex((t) => t === type);
        yield (0, import_core.convert)(absolute, elementType);
        console.log("Convert successfully");
      }
    });
  }
};
import_yargs.default.scriptName("llama").usage("$0 <cmd> [args]").command(new ConvertCommand()).command(new InferenceCommand()).demandCommand(1, "You need at least one command before moving on").strict().parse();
//# sourceMappingURL=index.js.map